#!/bin/bash

set -e
shopt -s nullglob

DIR="$(cd "${0%/*}" && pwd -P)"
HOSTS=($DIR/misc/host-*)
HOSTSNAMES=(${HOSTS[@]/#$DIR\/misc\/host-})
HOSTNAME="$(hostname)"

setup_symlink() {
    local dir file link target

    dir=$1
    file="$DIR/$2"
    link="$(grep "^$2 " $DIR/misc/MAPPING | cut -d ' ' -f 2-)"
    if [[ -e "$DIR/host-$HOSTNAME/$2" ]]
    then
        file="$DIR/host-$HOSTNAME/$2"
    fi
    if [[ -z "$link" ]]
    then
        link="$HOME/.$2"
    else
        link=${link/\~/$HOME}
    fi

    if [[ -L "$link" ]]
    then
        target="$(readlink "$link")"
        if [[ "$target" != "$file" ]]
        then
            echo "WARNING: $link links to $target instead of $file"
            read -p "Do you want to update the link? [y/N]: " -r answer
            if [[ "${answer^*}" == "Y" ]]
            then
                echo "INFO: Updating $link"
                ln -s -f "$file" "$link"
            else
                echo "INFO: $link not updated"
            fi
        else
            echo "INFO: $link already exists"
        fi
    elif $dir && [[ -d "$link" ]]
    then
        if [[ "$(\ls -A "$link")" ]]
        then
            echo "WARNING: $link exists and is not empty."
        else
            echo "INFO: Removing directory $link and creating link."
            rmdir "$link"
            ln -s "$file" "$link"
        fi
    elif [[ ! -e "$link" ]]
    then
        echo "INFO: Creating $link"
        mkdir -p "$(dirname "$link")"
        ln -s "$file" "$link"
    else
        echo "WARNING: $link exists and is not a symlink."
    fi
}

setup_file_symlink() {
    setup_symlink false "$1"
}

setup_dir_symlink() {
    setup_symlink true "$1"
}

list_hosts() {
    local IFS=$'\t'
    local hosts="${HOSTSNAMES[*]}"

    echo "$hosts"
}

read_host_file() {
    local IFS=$'\n'
    local __result=$1
    local host="$2"
    local items=""

    if [[ ! -e "$DIR/misc/host-$host" ]]
    then
        echo "ERROR: No config file for host '${host}'!"
        exit 1
    else
        items=($(< $DIR/misc/host-$host))
    fi

    eval $__result="'${items[@]}'"
}

usage() {
    echo "Usage:"
    echo "    $0 host [<host>]"
    echo "    $0 link <file>..."
    echo "    $0 list-hosts"
    exit 1
}

if [[ $# -eq 0 ]]
then
    usage
elif [[ $# -eq 1 && "$1" = "list-hosts" ]]
then
    list_hosts
    exit 0
elif [[ "$1" = "host" ]]
then
    if [[ $# -eq 1 ]]
    then
        host="$HOSTNAME"
    elif [[ $# -eq 2 ]]
    then
        host="$2"
    else
        usage
    fi
    read_host_file files $host
    vundle=true
elif [[ $# -gt 1 && "$1" = "link" ]]
then
    shift
    files=($@)
    vundle=false
else
    usage
fi

for name in ${files[@]}
do
    if [[ "$name" = "setup" || "$name" = "misc" ]]
    then
        continue
    elif [[ ! -e "$DIR/$name" ]]
    then
        echo "WARNING: Skipping ${name}... Doesn't exist!"
    elif [[ -d "$DIR/$name" ]]
    then
        setup_dir_symlink "$name"
    else
        setup_file_symlink "$name"
    fi
done

if $vundle
then
    echo -n "Cloning vundle... "
    if [[ ! -d "$HOME/.vim/bundle/vundle/.git" ]]
    then
        git clone https://github.com/gmarik/vundle.git ~/.vim/bundle/vundle
        echo "Vundle has been cloned"
    else
        echo "Vundle already exists"
    fi
    echo -n "Installing bundles... "
    vim -u ~/.vimrc.bundles +PluginInstall +qa
    echo "Bundles have been installed"
fi
