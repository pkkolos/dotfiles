#!/bin/bash

set -e
shopt -s nullglob

DIR="$(cd "${0%/*}" && pwd -P)"
HOSTS=($DIR/misc/host-*)
HOSTSNAMES=(${HOSTS[@]/#$DIR\/misc\/host-})
TAGS=($DIR/misc/tag-*)
TAGSNAMES=(${TAGS[@]/#$DIR\/misc\/tag-})
HOSTNAME="$(hostname)"
VUNDLE=false

setup_symlink() {
    local dir=$1
    local file="$DIR/$2"
    local link="$(\grep "^$2 " $DIR/misc/MAPPING | cut -d ' ' -f 2-)"
    local target answer

    if [[ -e "$DIR/host-$HOSTNAME/$2" ]]
    then
        file="$DIR/host-$HOSTNAME/$2"
    fi
    if [[ -z "$link" ]]
    then
        link="$HOME/.$2"
    else
        link=${link/\~/$HOME}
    fi

    if [[ -L "$link" ]]
    then
        target="$(readlink "$link")"
        if [[ "$target" != "$file" ]]
        then
            echo "WARNING: $link links to $target instead of $file"
            read -p "Do you want to update the link? [y/N]: " -r answer
            if [[ "${answer^*}" == "Y" ]]
            then
                echo "INFO: Updating $link"
                ln -s -f "$file" "$link"
            else
                echo "INFO: $link not updated"
            fi
        else
            echo "INFO: $link already exists"
        fi
    elif $dir && [[ -d "$link" ]]
    then
        if [[ "$(\ls -A "$link")" ]]
        then
            echo "WARNING: $link exists and is not empty."
        else
            echo "INFO: Removing directory $link and creating link."
            rmdir "$link"
            ln -s "$file" "$link"
        fi
    elif [[ ! -e "$link" ]]
    then
        echo "INFO: Creating $link"
        mkdir -p "$(dirname "$link")"
        ln -s "$file" "$link"
    else
        echo "WARNING: $link exists and is not a symlink."
    fi
}

setup_file_symlink() {
    setup_symlink false "$1"
}

setup_dir_symlink() {
    setup_symlink true "$1"
}

list_hosts() {
    local IFS=$'\t'
    local hosts="${HOSTSNAMES[*]}"

    echo "$hosts"
}

list_tags() {
    local IFS=$'\t'
    local tags="${TAGSNAMES[*]}"

    echo "$tags"
}

read_files() {
    read_tags() {
        local IFS=$'\n'
        local __result=$1
        local from_host=$2
        local file="$3"
        local tag="${file/#$DIR\/misc\/tag-}"
        local items=""

        if [[ ! -e "$file" ]]
        then
            if $from_host
            then
                echo "WARNING: Unknown tag '${tag}' in host config file!"
            else
                echo "WARNING: Skipping tag '${tag}'... Doesn't exist!"
            fi
        else
            items=($(< $file))
            [[ "$tag" = "vim" ]] && VUNDLE=true
        fi

        eval $__result="'${items[@]}'"
    }

    local IFS=$'\n'
    local __result=$1
    local tags=$2
    local input=${@:3}
    local items=""
    local item file list tmp

    for item in ${input[@]}
    do
        if $tags
        then
            read_tags tmp false "$DIR/misc/tag-$item"
            items="$items $tmp"
        else
            if [[ ! -e "$DIR/misc/host-$item" ]]
            then
                echo "ERROR: No config file for host '${item}'!"
                exit 1
            else
                list=($(< $DIR/misc/host-$item))
                for file in ${list[@]}
                do
                    if [[ $file =~ ^TAG: ]]
                    then
                        file="${file#TAG:}"
                        read_tags tmp true "$DIR/misc/tag-$file"
                        items="$items $tmp"
                    else
                        items="$items $file"
                    fi
                done
            fi
        fi
    done

    eval $__result="'$items'"
}

read_host_file() {
    local __result=$1
    local result

    read_files result false $2
    eval $__result="'$result'"
}

read_tag_files() {
    local __result=$1
    local result

    read_files result true ${@:2}
    eval $__result="'$result'"
}

usage() {
    echo "Usage:"
    echo "    $0 host [<host>]"
    echo "    $0 tag <tag>..."
    echo "    $0 link <file>..."
    echo "    $0 (list-hosts | list-tags)"
    exit 1
}

if [[ $# -eq 0 ]]
then
    usage
elif [[ $# -eq 1 && "$1" = "list-hosts" ]]
then
    list_hosts
    exit 0
elif [[ $# -eq 1 && "$1" = "list-tags" ]]
then
    list_tags
    exit 0
elif [[ "$1" = "host" ]]
then
    if [[ $# -eq 1 ]]
    then
        host="$HOSTNAME"
    elif [[ $# -eq 2 ]]
    then
        host="$2"
    else
        usage
    fi
    read_host_file files $host
elif [[ $# -gt 1 && "$1" = "tag" ]]
then
    shift
    read_tag_files files $@
elif [[ $# -gt 1 && "$1" = "link" ]]
then
    shift
    files=($@)
else
    usage
fi

for name in ${files[@]}
do
    if [[ "$name" = "setup" || "$name" = "misc" ]]
    then
        continue
    elif [[ ! -e "$DIR/$name" ]]
    then
        echo "WARNING: Skipping ${name}... Doesn't exist!"
    elif [[ -d "$DIR/$name" ]]
    then
        setup_dir_symlink "$name"
    else
        setup_file_symlink "$name"
    fi
done

if $VUNDLE
then
    echo -n "Cloning vundle... "
    if [[ ! -d "$HOME/.vim/bundle/vundle/.git" ]]
    then
        git clone https://github.com/gmarik/vundle.git ~/.vim/bundle/vundle
        echo "Vundle has been cloned"
    else
        echo "Vundle already exists"
    fi
    echo -n "Installing bundles... "
    vim -u ~/.vimrc.bundles +PluginInstall +qa
    echo "Bundles have been installed"
fi
